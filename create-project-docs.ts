// create-project-docs.ts
// Run this in lovable.dev to generate comprehensive project documentation

import fs from 'fs';
import path from 'path';

// Configuration for what files to include/exclude
const IMPORTANT_EXTENSIONS = [
  '.ts', '.tsx', '.js', '.jsx', 
  '.css', '.scss', '.json', '.md',
  '.sql', '.env.example'
];

const IMPORTANT_DIRECTORIES = [
  'src', 'components', 'lib', 'hooks', 'pages', 
  'utils', 'services', 'integrations', 'types',
  'supabase', 'public', 'styles'
];

const EXCLUDE_PATTERNS = [
  'node_modules', '.git', 'dist', 'build', 
  '.next', '.cache', '.vercel', 'coverage'
];

// Function to check if path should be excluded
function shouldExclude(filePath: string): boolean {
  return EXCLUDE_PATTERNS.some(pattern => filePath.includes(pattern));
}

// Function to check if file is important
function isImportantFile(filePath: string): boolean {
  const ext = path.extname(filePath);
  return IMPORTANT_EXTENSIONS.includes(ext) && !shouldExclude(filePath);
}

// Recursively get all files in directory
function getAllFiles(dirPath: string, arrayOfFiles: string[] = []): string[] {
  try {
    const files = fs.readdirSync(dirPath);

    files.forEach((file) => {
      const filePath = path.join(dirPath, file);
      if (shouldExclude(filePath)) return;

      if (fs.statSync(filePath).isDirectory()) {
        arrayOfFiles = getAllFiles(filePath, arrayOfFiles);
      } else if (isImportantFile(filePath)) {
        arrayOfFiles.push(filePath);
      }
    });
  } catch (error) {
    console.error(`Error reading directory ${dirPath}:`, error);
  }

  return arrayOfFiles;
}

// Generate file tree structure
function generateFileTree(files: string[]): string {
  const tree: any = {};
  
  files.forEach(file => {
    const parts = file.split(path.sep);
    let current = tree;
    
    parts.forEach((part, index) => {
      if (index === parts.length - 1) {
        current[part] = null;
      } else {
        current[part] = current[part] || {};
        current = current[part];
      }
    });
  });

  function printTree(obj: any, prefix = ''): string {
    let result = '';
    const entries = Object.entries(obj);
    
    entries.forEach(([key, value], index) => {
      const isLast = index === entries.length - 1;
      const connector = isLast ? '└── ' : '├── ';
      result += prefix + connector + key + '\n';
      
      if (value !== null) {
        const extension = isLast ? '    ' : '│   ';
        result += printTree(value, prefix + extension);
      }
    });
    
    return result;
  }

  return printTree(tree);
}

// Analyze project structure
function analyzeProject(): any {
  const projectInfo: any = {
    timestamp: new Date().toISOString(),
    files: [],
    structure: {},
    stats: {
      totalFiles: 0,
      byType: {},
      byDirectory: {}
    }
  };

  // Get all important files
  const files = getAllFiles('.');
  projectInfo.files = files.sort();
  projectInfo.stats.totalFiles = files.length;

  // Count files by type
  files.forEach(file => {
    const ext = path.extname(file) || 'no-extension';
    projectInfo.stats.byType[ext] = (projectInfo.stats.byType[ext] || 0) + 1;

    const dir = path.dirname(file).split(path.sep)[0] || 'root';
    projectInfo.stats.byDirectory[dir] = (projectInfo.stats.byDirectory[dir] || 0) + 1;
  });

  // Identify key project files
  projectInfo.keyFiles = {
    packageJson: fs.existsSync('package.json'),
    tsconfig: fs.existsSync('tsconfig.json'),
    envExample: fs.existsSync('.env.example'),
    supabaseTypes: files.find(f => f.includes('supabase') && f.includes('types')),
    phoneUtils: files.find(f => f.includes('phoneUtils')),
    smsComponents: files.filter(f => f.toLowerCase().includes('sms')),
    authComponents: files.filter(f => f.toLowerCase().includes('auth')),
    databaseSchema: files.filter(f => f.endsWith('.sql'))
  };

  return projectInfo;
}

// Generate README content
function generateReadme(projectInfo: any): string {
  const fileTree = generateFileTree(projectInfo.files);
  
  return `# Serenity Recovery App - Project Documentation

**Last Updated:** ${new Date().toISOString()}
**Auto-generated by:** create-project-docs.ts

## 🎯 Project Overview

Serenity is a mental health and addiction recovery app built with:
- **Frontend:** React + TypeScript + Tailwind CSS
- **Backend:** Supabase (PostgreSQL + Auth + Realtime)
- **Development:** Lovable.dev
- **SMS:** Twilio (A2P 10DLC pending)

## 📁 Project Structure

\`\`\`
${fileTree}
\`\`\`

## 🗄️ Database Schema

### Core Tables
- **profiles** - User profiles with phone numbers (E.164 format)
- **notifications** - In-app notification system
- **notification_preferences** - User notification settings
- **notification_read_receipts** - Track read status
- **support_network** - User connections for crisis alerts
- **check_ins** - Daily recovery check-ins
- **crisis_contacts** - Emergency contact information

### Key Relationships
- Users → Profiles (1:1)
- Users → Notifications (1:many)
- Users → Support Network (many:many)

## 🎨 Styling Guidelines

- **UI Framework:** Tailwind CSS
- **Component Library:** shadcn/ui
- **Color Scheme:** 
  - Primary: Recovery-focused calm colors
  - Destructive: Red for crisis alerts
  - Muted: Gray tones for secondary content
- **Design Principles:**
  - Mobile-first responsive design
  - Accessibility-focused (WCAG 2.1 AA)
  - Recovery-centered UX (calm, supportive, clear)

## 📱 Key Features Status

### ✅ Completed
- Phone number standardization (E.164 format)
- SMS system (Twilio integration, mock mode)
- Crisis contact management
- Basic authentication flow
- Phone input components

### 🚧 In Progress
- In-app notification system
- Daily check-ins
- Support network features

### 📋 Planned
- Recovery milestones
- Group support features
- Analytics dashboard

## 🔧 Technical Details

### Environment Variables Required
\`\`\`
SUPABASE_URL=https://tqyiqstpvwztvofrxpuf.supabase.co
SUPABASE_ANON_KEY=[your-anon-key]
TWILIO_ACCOUNT_SID=[pending-a2p-approval]
TWILIO_AUTH_TOKEN=[pending-a2p-approval]
TWILIO_PHONE_NUMBER=+12406972451
TWILIO_MESSAGING_SERVICE_SID=[your-messaging-service-sid]
\`\`\`

### Phone Number System
- **Format:** E.164 (+1XXXXXXXXXX)
- **Utilities:** \`src/lib/phoneUtils.ts\`
- **Components:** 
  - \`PhoneInput.tsx\` - Basic input
  - \`PhoneInputValidated.tsx\` - With validation
  - \`CrisisContactForm.tsx\` - Emergency contacts

### SMS Integration
- **Status:** Built, waiting for A2P approval
- **Edge Function:** \`supabase/functions/send-sms\`
- **Mock Mode:** Currently active
- **Go Live:** After A2P approval (2-3 weeks)

### Notification System
- **Database:** notifications, preferences, read_receipts tables
- **Service:** \`src/lib/notificationService.ts\`
- **Components:** NotificationBell, List, Preferences
- **Real-time:** Supabase subscriptions

## 📊 File Statistics
- **Total Files:** ${projectInfo.stats.totalFiles}
- **File Types:** ${JSON.stringify(projectInfo.stats.byType, null, 2)}
- **By Directory:** ${JSON.stringify(projectInfo.stats.byDirectory, null, 2)}

## 🔑 Key Files Reference

### Core Configuration
- \`package.json\` - Dependencies and scripts
- \`tsconfig.json\` - TypeScript configuration
- \`.env.example\` - Environment template

### Phone/SMS System
${projectInfo.keyFiles.phoneUtils ? `- \`${projectInfo.keyFiles.phoneUtils}\` - Phone utilities` : ''}
${projectInfo.keyFiles.smsComponents.map((f: string) => `- \`${f}\``).join('\n')}

### Authentication
${projectInfo.keyFiles.authComponents.map((f: string) => `- \`${f}\``).join('\n')}

### Database
${projectInfo.keyFiles.databaseSchema.map((f: string) => `- \`${f}\``).join('\n')}

## 🚀 Development Workflow

1. **Local Development**
   \`\`\`bash
   npm install
   npm run dev
   \`\`\`

2. **Database Updates**
   - Run SQL in Supabase dashboard
   - Generate types: \`npm run supabase:types\`

3. **Adding Features**
   - Update this README
   - Follow existing patterns
   - Test in mock mode first

## 📝 Update Instructions

**IMPORTANT:** Update this file whenever you:
- Add new features
- Create new components
- Modify database schema
- Change environment variables
- Update dependencies

Run \`node create-project-docs.ts\` to regenerate file listings.

## 🎯 Christopher's Context
- **Clean Date:** July 20, 2025
- **Recovery First:** All features support sobriety
- **Key Milestone:** October 18, 2025 (90 days + birthday)
- **Mission:** Help others in recovery through technology

---
*This documentation is critical for maintaining project continuity across chat sessions.*
`;
}

// Main execution
async function main() {
  console.log('🔍 Analyzing project structure...');
  const projectInfo = analyzeProject();
  
  console.log('📝 Generating README...');
  const readmeContent = generateReadme(projectInfo);
  
  // Write README
  fs.writeFileSync('PROJECT_DOCS.md', readmeContent);
  console.log('✅ Created PROJECT_DOCS.md');
  
  // Write important files list
  const filesList = projectInfo.files.join('\n');
  fs.writeFileSync('important-files.txt', filesList);
  console.log('✅ Created important-files.txt');
  
  // Write JSON summary for easy parsing
  fs.writeFileSync('project-info.json', JSON.stringify(projectInfo, null, 2));
  console.log('✅ Created project-info.json');
  
  console.log('\n📊 Summary:');
  console.log(`- Total important files: ${projectInfo.stats.totalFiles}`);
  console.log(`- Key directories: ${Object.keys(projectInfo.stats.byDirectory).join(', ')}`);
  console.log('\n🎯 Next steps:');
  console.log('1. Review PROJECT_DOCS.md');
  console.log('2. Run this script after major updates');
  console.log('3. Include PROJECT_DOCS.md in future chat contexts');
}

// Run the script
main().catch(console.error);